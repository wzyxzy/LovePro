package com.wzy.lamanpro.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GFS".
*/
public class GFsDao extends AbstractDao<GFs, Void> {

    public static final String TABLENAME = "GFS";

    /**
     * Properties of entity GFs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Birth = new Property(2, String.class, "birth", false, "BIRTH");
        public final static Property Height = new Property(3, int.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(4, int.class, "weight", false, "WEIGHT");
        public final static Property Yanzhi = new Property(5, int.class, "yanzhi", false, "YANZHI");
        public final static Property Dirct = new Property(6, String.class, "dirct", false, "DIRCT");
        public final static Property St = new Property(7, String.class, "st", false, "ST");
        public final static Property Work = new Property(8, String.class, "work", false, "WORK");
        public final static Property Ins = new Property(9, int.class, "ins", false, "INS");
        public final static Property Rec = new Property(10, String.class, "rec", false, "REC");
        public final static Property Loveme = new Property(11, int.class, "loveme", false, "LOVEME");
        public final static Property Ilove = new Property(12, int.class, "ilove", false, "ILOVE");
        public final static Property Relate = new Property(13, int.class, "relate", false, "RELATE");
        public final static Property Others = new Property(14, int.class, "others", false, "OTHERS");
        public final static Property Futureinbj = new Property(15, int.class, "futureinbj", false, "FUTUREINBJ");
        public final static Property Marks = new Property(16, String.class, "marks", false, "MARKS");
        public final static Property Sort = new Property(17, int.class, "sort", false, "SORT");
        public final static Property Point = new Property(18, int.class, "point", false, "POINT");
        public final static Property Point_now = new Property(19, int.class, "point_now", false, "POINT_NOW");
    }


    public GFsDao(DaoConfig config) {
        super(config);
    }
    
    public GFsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GFS\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"BIRTH\" TEXT," + // 2: birth
                "\"HEIGHT\" INTEGER NOT NULL ," + // 3: height
                "\"WEIGHT\" INTEGER NOT NULL ," + // 4: weight
                "\"YANZHI\" INTEGER NOT NULL ," + // 5: yanzhi
                "\"DIRCT\" TEXT," + // 6: dirct
                "\"ST\" TEXT," + // 7: st
                "\"WORK\" TEXT," + // 8: work
                "\"INS\" INTEGER NOT NULL ," + // 9: ins
                "\"REC\" TEXT," + // 10: rec
                "\"LOVEME\" INTEGER NOT NULL ," + // 11: loveme
                "\"ILOVE\" INTEGER NOT NULL ," + // 12: ilove
                "\"RELATE\" INTEGER NOT NULL ," + // 13: relate
                "\"OTHERS\" INTEGER NOT NULL ," + // 14: others
                "\"FUTUREINBJ\" INTEGER NOT NULL ," + // 15: futureinbj
                "\"MARKS\" TEXT," + // 16: marks
                "\"SORT\" INTEGER NOT NULL ," + // 17: sort
                "\"POINT\" INTEGER NOT NULL ," + // 18: point
                "\"POINT_NOW\" INTEGER NOT NULL );"); // 19: point_now
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GFS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GFs entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(3, birth);
        }
        stmt.bindLong(4, entity.getHeight());
        stmt.bindLong(5, entity.getWeight());
        stmt.bindLong(6, entity.getYanzhi());
 
        String dirct = entity.getDirct();
        if (dirct != null) {
            stmt.bindString(7, dirct);
        }
 
        String st = entity.getSt();
        if (st != null) {
            stmt.bindString(8, st);
        }
 
        String work = entity.getWork();
        if (work != null) {
            stmt.bindString(9, work);
        }
        stmt.bindLong(10, entity.getIns());
 
        String rec = entity.getRec();
        if (rec != null) {
            stmt.bindString(11, rec);
        }
        stmt.bindLong(12, entity.getLoveme());
        stmt.bindLong(13, entity.getIlove());
        stmt.bindLong(14, entity.getRelate());
        stmt.bindLong(15, entity.getOthers());
        stmt.bindLong(16, entity.getFutureinbj());
 
        String marks = entity.getMarks();
        if (marks != null) {
            stmt.bindString(17, marks);
        }
        stmt.bindLong(18, entity.getSort());
        stmt.bindLong(19, entity.getPoint());
        stmt.bindLong(20, entity.getPoint_now());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GFs entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(3, birth);
        }
        stmt.bindLong(4, entity.getHeight());
        stmt.bindLong(5, entity.getWeight());
        stmt.bindLong(6, entity.getYanzhi());
 
        String dirct = entity.getDirct();
        if (dirct != null) {
            stmt.bindString(7, dirct);
        }
 
        String st = entity.getSt();
        if (st != null) {
            stmt.bindString(8, st);
        }
 
        String work = entity.getWork();
        if (work != null) {
            stmt.bindString(9, work);
        }
        stmt.bindLong(10, entity.getIns());
 
        String rec = entity.getRec();
        if (rec != null) {
            stmt.bindString(11, rec);
        }
        stmt.bindLong(12, entity.getLoveme());
        stmt.bindLong(13, entity.getIlove());
        stmt.bindLong(14, entity.getRelate());
        stmt.bindLong(15, entity.getOthers());
        stmt.bindLong(16, entity.getFutureinbj());
 
        String marks = entity.getMarks();
        if (marks != null) {
            stmt.bindString(17, marks);
        }
        stmt.bindLong(18, entity.getSort());
        stmt.bindLong(19, entity.getPoint());
        stmt.bindLong(20, entity.getPoint_now());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GFs readEntity(Cursor cursor, int offset) {
        GFs entity = new GFs( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // birth
            cursor.getInt(offset + 3), // height
            cursor.getInt(offset + 4), // weight
            cursor.getInt(offset + 5), // yanzhi
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dirct
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // st
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // work
            cursor.getInt(offset + 9), // ins
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rec
            cursor.getInt(offset + 11), // loveme
            cursor.getInt(offset + 12), // ilove
            cursor.getInt(offset + 13), // relate
            cursor.getInt(offset + 14), // others
            cursor.getInt(offset + 15), // futureinbj
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // marks
            cursor.getInt(offset + 17), // sort
            cursor.getInt(offset + 18), // point
            cursor.getInt(offset + 19) // point_now
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GFs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBirth(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeight(cursor.getInt(offset + 3));
        entity.setWeight(cursor.getInt(offset + 4));
        entity.setYanzhi(cursor.getInt(offset + 5));
        entity.setDirct(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWork(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIns(cursor.getInt(offset + 9));
        entity.setRec(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLoveme(cursor.getInt(offset + 11));
        entity.setIlove(cursor.getInt(offset + 12));
        entity.setRelate(cursor.getInt(offset + 13));
        entity.setOthers(cursor.getInt(offset + 14));
        entity.setFutureinbj(cursor.getInt(offset + 15));
        entity.setMarks(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSort(cursor.getInt(offset + 17));
        entity.setPoint(cursor.getInt(offset + 18));
        entity.setPoint_now(cursor.getInt(offset + 19));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GFs entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GFs entity) {
        return null;
    }

    @Override
    public boolean hasKey(GFs entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
